#+TITLE:Gian12315 GNU Emacs Config
#+AUTHOR: Giancarlo Espitia Ramirez (Gian12315)
#+DESCRIPTION: Gian's personal Emacs config.
#+STARTUP: showeverything
#+OPTIONS: toc:2

Consider git-timemachine
- Git-Timemachine
- hl-todo
- Bind perspective map to general prefix
- Rainbow Mode
- Rainbow delimiters?
- Tldr?
  
Continue reading that dude confs (the one who is a philosopher)

* TABLE OF CONTENTS                                                      :toc:
- [[#initel][INIT.EL]]
  - [[#the-early-initel-macro-to-run-code-only-in-a-desktop-environment][The =early-init.el= macro to run code only in a Desktop Environment]]
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#elpaca-package-manager][Elpaca Package Manager]]
  - [[#general-keybindings][General Keybindings]]
  - [[#meow][Meow]]
  - [[#load-evil-mode][Load Evil Mode]]
- [[#ace-window][ACE WINDOW]]
- [[#backups][BACKUPS]]
- [[#beacon][BEACON]]
- [[#buffer-move][BUFFER MOVE]]
- [[#completion][COMPLETION]]
  - [[#vertico][Vertico]]
  - [[#orderless][Orderless]]
  - [[#marginalia][Marginalia]]
  - [[#embark][Embark]]
  - [[#consult][Consult]]
- [[#corfu][Corfu]]
  - [[#icons-with-nerd-font][Icons with Nerd Font]]
  - [[#corfu-terminal][Corfu Terminal]]
- [[#cape][CAPE]]
- [[#dashboard][DASHBOARD]]
- [[#electric-pair-mode][ELECTRIC PAIR MODE]]
- [[#eshell][ESHELL]]
- [[#fonts][FONTS]]
  - [[#zooming-inout][Zooming In/Out]]
- [[#golden-ratio][GOLDEN RATIO]]
- [[#graphical-user-interface-tweaks][GRAPHICAL USER INTERFACE TWEAKS]]
  - [[#disable-menubar-toolbars-and-scrollbars][Disable Menubar, Toolbars and Scrollbars]]
  - [[#display-line-numbers-and-truncated-lines][Display Line Numbers and Truncated Lines]]
- [[#nerd-fonts-icons][NERD FONTS ICONS]]
- [[#perspective][PERSPECTIVE]]
- [[#magit][MAGIT]]
- [[#templates][TEMPLATES]]
- [[#treemacs][TREEMACS]]
- [[#themes][THEMES]]
  - [[#selected-theme][Selected Theme]]
- [[#org-mode][ORG MODE]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#org-download][Org Download]]
  - [[#meow-and-org-mode-bindings][Meow and Org Mode bindings]]
- [[#spacious-padding][SPACIOUS PADDING]]
- [[#projectel][PROJECT.EL]]
- [[#puni][PUNI]]
- [[#recentf-mode][RECENTF-MODE]]
- [[#sudo-edit][SUDO EDIT]]
- [[#vundo][VUNDO]]
- [[#which-key][WHICH-KEY]]
- [[#wgrep][WGREP]]
- [[#programming-languages][PROGRAMMING LANGUAGES]]
  - [[#common-lisp][Common Lisp]]
  - [[#php][PHP]]

* INIT.EL
The following code blocks will tangle to the =early-init.el= file, which has configuration that will be rendered before the frame renders

** The =early-init.el= macro to run code only in a Desktop Environment

#+begin_src emacs-lisp :tangle "early-init.el"
  (defvar gian/tiling-window-manager-regexp
    "Regular expresion to tiling window managers that I might use."
    (regexp-opt '("stumpwm")))

  (defmacro gian/with-desktop-session (&rest body)
    (declare (indent 0))
    `(when-let ((session (getenv "DESKTOP_SESSION"))
                ((not (string-match-p session gian/tiling-window-manager-regexp))))
       ,@body))
#+end_src
      

* IMPORTANT PROGRAMS TO LOAD FIRST
** Elpaca Package Manager

#+begin_src emacs-lisp
    (defvar elpaca-installer-version 0.6)
    (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
    (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
    (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
    (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                  :ref nil
                                  :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                                  :build (:not elpaca--activate-package)))
    (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
           (build (expand-file-name "elpaca/" elpaca-builds-directory))
           (order (cdr elpaca-order))
           (default-directory repo))
      (add-to-list 'load-path (if (file-exists-p build) build repo))
      (unless (file-exists-p repo)
        (make-directory repo t)
        (when (< emacs-major-version 28) (require 'subr-x))
        (condition-case-unless-debug err
            (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                     ((zerop (call-process "git" nil buffer t "clone"
                                           (plist-get order :repo) repo)))
                     ((zerop (call-process "git" nil buffer t "checkout"
                                           (or (plist-get order :ref) "--"))))
                     (emacs (concat invocation-directory invocation-name))
                     ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                           "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                     ((require 'elpaca))
                     ((elpaca-generate-autoloads "elpaca" repo)))
                (progn (message "%s" (buffer-string)) (kill-buffer buffer))
              (error "%s" (with-current-buffer buffer (buffer-string))))
          ((error) (warn "%s" err) (delete-directory repo 'recursive))))
      (unless (require 'elpaca-autoloads nil t)
        (require 'elpaca)
        (elpaca-generate-autoloads "elpaca" repo)
        (load "./elpaca-autoloads")))
    (add-hook 'after-init-hook #'elpaca-process-queues)
    (elpaca `(,@elpaca-order))

  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable :elpaca use-package keyword.
    (elpaca-use-package-mode)
    ;; Assume :elpaca t unless otherwise specified.
    (setq elpaca-use-package-by-default t))

  ;; Block until current queue processed.
  (elpaca-wait)

  ;;When installing a package which modifies a form used at the top-level
  ;;(e.g. a package which adds a use-package key word),
  ;;use `elpaca-wait' to block until that package has been installed/configured.
  ;;For example:
  ;;(use-package general :demand t)
  ;;(elpaca-wait)

#+end_src

** General Keybindings

#+begin_src emacs-lisp
    (use-package general
       :config

       (general-create-definer gian/leader-keys
         :prefix "C-c") ;; set leader
         ;;:global-prefix "M-SPC")

        (gian/leader-keys
          "f" '(:ignore :wk "Files")
          "f f" '(find-file :wk "Find file")
          "f c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Edit emacs config")
          "f r" '(consult-recent-file :wk "Find recent files"))

       (gian/leader-keys
          "b" '(:ignore t :wk "buffer")
          "b b" '(switch-to-buffer :wk "Switch buffer")
          "b i" '(ibuffer :wk "Ibuffer")
          "b k" '(kill-this-buffer :wk "Kill this buffer")
          "b n" '(next-buffer :wk "Next buffer")
          "b p" '(previous-buffer :wk "Previous buffer")
          "b r" '(revert-buffer :wk "Reload buffer"))

       (gian/leader-keys
          "e" '(:ignore t :wk "Eshell/Evaluate")
          "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
          "e d" '(eval-defun :wk "Evalaute defun containing or after point")
          "e e" '(eval-expression :wk "Evalaute an elisp expression")
          "e l" '(eval-last-sexp :wk "Evalaute elisp expression before point")
          "e r" '(eval-region :wk "Evalaute elisp in region")
          "e s" '(eshell :which-key "Eshell"))
       
       (gian/leader-keys
          "t" '(:ignore t :wk "Toggle")
          "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
          "t t" '(visual-line-mode :wk "Toggle truncated lines"))

       (gian/leader-keys
          "w" '(:ignore t :wk "Windows")
              ;; Window splits
    "w c" '(delete-window :wk "Close window")
    "w s" '(split-window-below :wk "Horizontal split window")
    "w v" '(split-window-right :wk "Vertical split window")
    ;; Window motions
    "w o" '(ace-window :wk "Change window")
    ;; Move Windows
    "w h" '(buf-move-left :wk "Buffer move left")
    "w j" '(buf-move-down :wk "Buffer move down")
    "w k" '(buf-move-up :wk "Buffer move up")
    "w l" '(buf-move-right :wk "Buffer move right"))
    )

  (elpaca-wait)
#+end_src

** Meow
#+begin_src emacs-lisp
  (defun meow-setup ()
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
    (meow-motion-overwrite-define-key
     '("j" . meow-next)
     '("k" . meow-prev)
     '("<escape>" . ignore))
    (meow-leader-define-key
     ;; SPC j/k will run the original command in MOTION state.
     '("j" . "H-j")
     '("k" . "H-k")
     ;; Use SPC (0-9) for digit arguments.
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)
     '("/" . meow-keypad-describe-key)
     '("?" . meow-cheatsheet))
    (meow-normal-define-key
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("a" . meow-append)
     '("A" . meow-open-below)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change)
     '("d" . meow-delete)
     '("D" . meow-backward-delete)
     '("e" . meow-next-word)
     '("E" . meow-next-symbol)
     '("f" . meow-find)
     '("g" . meow-cancel-selection)
     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . meow-left-expand)
     '("i" . meow-insert)
     '("I" . meow-open-above)
     '("j" . meow-next)
     '("J" . meow-next-expand)
     '("k" . meow-prev)
     '("K" . meow-prev-expand)
     '("l" . meow-right)
     '("L" . meow-right-expand)
     '("m" . meow-join)
     '("n" . meow-search)
     '("o" . meow-block)
     '("O" . meow-to-block)
     '("p" . meow-yank)
     '("q" . meow-quit)
     '("Q" . meow-goto-line)
     '("r" . meow-replace)
     '("R" . meow-swap-grab)
     '("s" . meow-kill)
     '("t" . meow-till)
     '("u" . meow-undo)
     '("U" . meow-undo-in-selection)
     '("v" . meow-visit)
     '("w" . meow-mark-word)
     '("W" . meow-mark-symbol)
     '("x" . meow-line)
     '("X" . meow-goto-line)
     '("y" . meow-save)
     '("Y" . meow-sync-grab)
     '("z" . meow-pop-selection)
     '("'" . repeat)
     '("<escape>" . ignore))

    (meow-define-keys
        'insert '("C-g" . meow-insert-exit)))

  (use-package meow
   :config
   (meow-setup)
   (meow-global-mode 1))
#+end_src

** Load Evil Mode

#+begin_src emacs-lisp
  ;; (use-package evil
  ;; :init
  ;; (setq evil-want-integration t)
  ;; (setq evil-want-keybinding nil)
  ;; (setq evil-vsplit-window-right t)
  ;; (setq evil-split-window-below t)
  ;; (evil-mode))

  ;; (use-package evil-commentary
  ;; :config (evil-commentary-mode))

  ;; ;; This brings smartparens-mode along with it
  ;; ;; let's configure it
  ;; (use-package evil-surround
  ;; :config (global-evil-surround-mode 1))

  ;; (use-package evil-smartparens
  ;; :ghook
  ;; ;; add `smartparens-mode` to these hooks
  ;; ('(prog-mode-hook text-mode-hook markdown-mode-hook) #'smartparens-mode)
  ;; ;; add evil-smartparens to this gook
  ;; ('smartparens-enabled-hook)
  ;; :config (require 'smartparens-config))

  ;; (use-package evil-collection
  ;; :after evil
  ;; :config
  ;; (setq evil-collection-mode-list '(dashboard dired ibuffer))
  ;; (evil-collection-init))

  ;;     ;;Turns off elpaca-use-package-mode current declaration
  ;;     ;;Note this will cause the declaration to be interpreted immediately (not deferred).
  ;;     ;;Useful for configuring built-in emacs features.
  ;;     (use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))
#+end_src

* ACE WINDOW
#+begin_src emacs-lisp
  (use-package ace-window :general ("M-o" 'ace-window))
#+end_src

* BACKUPS
#+begin_src emacs-lisp
  (use-package emacs
    :elpaca nil
    :config
    (defconst gian/backup-dir
      (expand-file-name "backups" user-emacs-directory))
    (unless (file-exists-p gian/backup-dir)
      (make-directory gian/backup-dir))

    (setq backup-directory-alist `(("." . ,gian/backup-dir))))
#+end_src

* BEACON
#+begin_src emacs-lisp
  (use-package beacon
    :config
    (beacon-mode 1))
#+end_src

* BUFFER MOVE
#+begin_src emacs-lisp
  (use-package buffer-move)
#+end_src


* COMPLETION
** Vertico
#+begin_src emacs-lisp

        ;; Enable vertico
        (use-package vertico
          :init
          (vertico-mode)

          ;; Different scroll margin
          ;; (setq vertico-scroll-margin 0)

          ;; Show more candidates
          ;; (setq vertico-count 20)

          ;; Grow and shrink the Vertico minibuffer
          ;; (setq vertico-resize t)

          ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
          (setq vertico-cycle t)

          (savehist-mode)
          )

          ;; A few more useful configurations...
        ;; Add prompt indicator to `completing-read-multiple'.
        ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
      (use-package emacs
        :elpaca nil
        :init
        (defun crm-indicator (args)
          (cons (format "[CRM%s] %s"
                        (replace-regexp-in-string
                         "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                         crm-separator)
                        (car args))
                (cdr args)))
        (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

        ;; Do not allow the cursor in the minibuffer prompt
        (setq minibuffer-prompt-properties
              '(read-only t cursor-intangible t face minibuffer-prompt))
        (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

        ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
        ;; Vertico commands are hidden in normal buffers.
        (setq read-extended-command-predicate
              #'command-completion-default-include-p)

        ;; Enable recursive minibuffers
        (setq enable-recursive-minibuffers t))
#+end_src

** Orderless
#+begin_src emacs-lisp
   (use-package orderless
     :config
     (setq completion-styles '(orderless basic))
     (setq completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** Marginalia
#+begin_src emacs-lisp
  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
    ;; available in the *Completions* buffer, add it to the
    ;; `completion-list-mode-map'.
    :general
    (:keymaps 'minibuffer-local-map
       "M-A" 'marginalia-cycle)

    ;; The :init section is always executed.
    :init
    ;; Marginalia must be activated in the :init section of use-package such that
    ;; the mode gets enabled right away. Note that this forces loading the
    ;; package.
    (marginalia-mode))
#+end_src

** Embark
#+begin_src emacs-lisp
    (use-package embark
      :general
       ("C-." 'embark-act)         ;; pick some comfortable binding
       ("M-." 'embark-dwim)        ;; good alternative: M-.
       ("C-h b" 'embark-bindings) ;; alternative for `describe-bindings'
      :init

      ;; Optionally replace the key help with a completing-read interface
      (setq prefix-help-command #'embark-prefix-help-command)

      ;; Show the Embark target at point via Eldoc. You may adjust the
      ;; Eldoc strategy, if you want to see the documentation from
      ;; multiple providers. Beware that using this can be a little
      ;; jarring since the message shown in the minibuffer can be more
      ;; than one line, causing the modeline to move up and down:

      ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
      ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

      :config

      ;; Hide the mode line of the Embark live/completions buffers
      (add-to-list 'display-buffer-alist
                   '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                     nil
                     (window-parameters (mode-line-format . none)))))
#+end_src

** Consult
#+begin_src emacs-lisp
     ;; Example configuration for Consult
     (use-package consult
       ;; Due to usage with perspective, we must ensure this is loaded before it
       :demand t
       ;; Replace bindings. Lazily loaded due by `use-package'.
       :general
             ;; C-c bindings in `mode-specific-map'
              (:keymaps 'mode-specific-map
              "M-x" 'consult-mode-command
              "h" 'consult-history
              "k" 'consult-kmacro
              "m" 'consult-man
              "i" 'consult-info
              [remap Info-search] 'consult-info)
              ;; C-x bindings in `ctl-x-map'
              (:keymaps 'ctl-x-map
              "M-:" 'consult-complex-command     ;; orig. repeat-complex-command
              "b" 'consult-buffer                ;; orig. switch-to-buffer
              "4 b" 'consult-buffer-other-window ;; orig. switch-to-buffer-other-window
              "5 b" 'consult-buffer-other-frame  ;; orig. switch-to-buffer-other-frame
              "t b" 'consult-buffer-other-tab    ;; orig. switch-to-buffer-other-tab
              "r b" 'consult-bookmark            ;; orig. bookmark-jump
              "p b" 'consult-project-buffer)      ;; orig. project-switch-to-buffer
              ;; Custom M-# bindings for fast register access
              ("M-#" 'consult-register-load)
              ("M-'" 'consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
              ("C-M-#" 'consult-register)
              ;; Other custom bindings
              ("M-y" 'consult-yank-pop)                ;; orig. yank-pop
              ;; M-g bindings in `goto-map'
              (:keymaps 'goto-map
              "e" 'consult-compile-error
              "f" 'consult-flymake               ;; Alternative: consult-flycheck
              "g" 'consult-goto-line             ;; orig. goto-line
              "o" 'consult-outline               ;; Alternative: consult-org-heading
              "m" 'consult-mark
              "k" 'consult-global-mark
              "i" 'consult-imenu
              "I" 'consult-imenu-multi)
              ;; M-s bindings in `search-map'
              (:keymaps 'search-map
              "d" 'consult-find                  ;; Alternative: consult-fd
              "c" 'consult-locate
              "g" 'consult-grep
              "G" 'consult-git-grep
              "r" 'consult-ripgrep
              "l" 'consult-line
              "L" 'consult-line-multi
              "k" 'consult-keep-lines
              "u" 'consult-focus-lines)
              ;; Isearch integration
              (:keymaps 'isearch-mode-map
              "M-e" 'consult-isearch-history         ;; orig. isearch-edit-string
              "M-s e" 'consult-isearch-history       ;; orig. isearch-edit-string
              "M-s l" 'consult-line                  ;; needed by consult-line to detect isearch
              "M-s L" 'consult-line-multi)            ;; needed by consult-line to detect isearch
              ;; Minibuffer history
              (:keymaps 'minibuffer-local-map
              "M-s" 'consult-history                 ;; orig. next-matching-history-element
              "M-r" 'consult-history)                ;; orig. previous-matching-history-element

       ;; Enable automatic preview at point in the *Completions* buffer. This is
       ;; relevant when you use the default completion UI.
       :ghook ('completion-list-mode-hook #'consult-preview-at-point-mode)

       ;; The :init configuration is always executed (Not lazy)
       :init
       ;; Optionally configure the register formatting. This improves the register
       ;; preview for `consult-register', `consult-register-load',
       ;; `consult-register-store' and the Emacs built-ins.
       (setq register-preview-delay 0.5
             register-preview-function #'consult-register-format)

       ;; Optionally tweak the register preview window.
       ;; This adds thin lines, sorting and hides the mode line of the window.
       (advice-add #'register-preview :override #'consult-register-window)

       ;; Use Consult to select xref locations with preview
       (setq xref-show-xrefs-function #'consult-xref
             xref-show-definitions-function #'consult-xref)

       ;; Configure other variables and modes in the :config section,
       ;; after lazily loading the package.
       :config

    ;; Optionally configure preview. The default value
     ;; is 'any, such that any key triggers the preview.
     ;; (setq consult-preview-key 'any)
     ;; (setq consult-preview-key "M-.")
     ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
     ;; For some commands and buffer sources it is useful to configure the
     ;; :preview-key on a per-command basis using the `consult-customize' macro.
     (consult-customize
      consult-theme :preview-key '(:debounce 0.2 any)
      consult-ripgrep consult-git-grep consult-grep
      consult-bookmark consult-recent-file consult-xref
      consult--source-bookmark consult--source-file-register
      consult--source-recent-file consult--source-project-recent-file
      ;; :preview-key "M-."
      :preview-key '(:debounce 0.4 any))


       ;; Optionally configure the narrowing key.
       ;; Both `' and C-+ work reasonably well.
       (setq consult-narrow-key "<") ;; "C-+"

       ;; Optionally make narrowing help available in the minibuffer.
       ;; You may want to use `embark-prefix-help-command' or which-key instead.
       (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

       ;; By default `consult-project-function' uses `project-root' from project.el.
       ;; Optionally configure a different project root function.
       ;;;; 1. project.el (the default)
       (setq consult-project-function #'consult--default-project-function)
       ;;;; 2. vc.el (vc-root-dir)
       ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
       ;;;; 3. locate-dominating-file
       ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
       ;;;; 4. projectile.el (projectile-project-root)
       ;;(autoload 'projectile-project-root "projectile")
       ;;(setq consult-project-function (lambda (_) (projectile-project-root)))
       ;;;; 5. No project support
       ;; (setq consult-project-function nil)

       )    


  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :after (embark consult)
    :ghook ('embark-collect-mode-hook  #'consult-preview-at-point-mode))

#+end_src

* Corfu
#+begin_src emacs-lisp
  (use-package corfu
    ;; Optional customizations
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    (corfu-separator ?\s)          ;; Orderless field separator
    ;;(corfu-quit-at-boundary 'separator)   ;; Never quit at completion boundary
    ;;(corfu-quit-no-match t)        ;; Never quit, even if there is no match
    (corfu-preview-current 'insert)    ;; Disable current candidate preview
    ;;(corfu-preselect 'valid)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches'
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    :general
    (:keymaps 'corfu-map
              "RET" nil
              ;; Meow interacts badly with this, if we ever go to normal mode from
              ;; being in insert and in a corfu completion, and we move either up
              ;; or down, we enter into the completion ui, this is unintended
              ;; we then unbind next line and previous line, and manually
              ;; bind C-n and C-p
              [remap next-line] nil
              "C-n" 'corfu-next
              ;; "<up>" nil
              [remap previous-line] nil
              "C-p" 'corfu-previous
              ;; "<down>" nil
              "C-d" 'corfu-insert-separator)
    ;; (:keymaps 'corfu-map
              ;; "TAB" 'corfu-next
              ;; "[tab]" 'corfu-next
              ;; "S-TAB" 'corfu-previous
              ;; "[backtab]" 'corfu-previous)

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
    ;; be used globally (M-/).  See also the customization variable
    ;; `global-corfu-modes' to exclude certain modes.
    :init

    (global-corfu-mode)
    (corfu-popupinfo-mode 1)
    )

  ;; A few more useful configurations...
  (use-package emacs
    :elpaca nil
    :init
    ;; TAB cycle if there are only few candidates
    ;; (setq completion-cycle-threshold 3)

    ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
    ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
    (setq read-extended-command-predicate
          #'command-completion-default-include-p)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete))
#+end_src
** Icons with Nerd Font
#+begin_src emacs-lisp
    (use-package nerd-icons-corfu
      :config (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))

#+end_src
** Corfu Terminal
#+begin_src emacs-lisp
  (use-package corfu-terminal
    :unless (display-graphic-p) :config (corfu-terminal-mode +1))
#+end_src

* CAPE
#+begin_src emacs-lisp
  ;; Add extensions
  (use-package cape
    :ghook
    ('org-mode-hook #'gian/capf-setup-org)
    ('emacs-lisp-mode-hook #'gian/capf-setup-elisp)
    ('sly-mode-hook #'gian/capf-setup-common-lisp)
    :init

    (defun gian/capf-setup-org ()
      (setq-local completion-at-point-functions
                  `(,(cape-capf-super
                      #'pcomplete-completions-at-point
                      #'tempel-complete)
                    cape-file
                    cape-dict)))

    (defun gian/ignore-elisp-keywords (cand)
      (or (not (keywordp cand))
          (eq (char-after (car completion-in-region--data)) ?:)))

    (defun gian/capf-setup-elisp ()
      (setq-local completion-at-point-functions
                  `(,(cape-capf-super
                      (cape-capf-predicate
                       #'elisp-completion-at-point
                       #'gian/ignore-elisp-keywords)
                      #'tempel-complete
                      #'cape-dabbrev)
                    cape-file
                    )
                  cape-dabbrev-min-length 5))

    (defun gian/capf-setup-common-lisp ()
      (setq-local completion-at-point-functions '(cape-file tempel-complete sly-complete-symbol)))

    )
#+end_src


* DASHBOARD
#+begin_src emacs-lisp
    (use-package dashboard
      :elpaca t
      :init
      (add-hook 'elpaca-after-init-hook #'dashboard-insert-startupify-lists)
      (add-hook 'elpaca-after-init-hook #'dashboard-initialize)
      (dashboard-setup-startup-hook)

      ;; Emacs client opens the dashboard
      (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))

      (setq dashboard-banner-logo-title "Hey... prendan la luz...")
      (setq dashboard-startup-banner 'logo)

      (setq dashboard-center-content t)

      (setq dashboard-projects-backend 'project-el)

      ;; (setq dashboard-items '((recents . 5)
			      ;; (projects . 5)
			      ;; (agenda . 5)))

      ;; (setq dashboard-icon-type 'all-the-icons)
      ;; (setq dashboard-set-heading-icons t)
      ;; (setq dashboard-set-file-icons t)

      (setq dashboard-week-agenda t)
  
  )
#+end_src
* ELECTRIC PAIR MODE
#+begin_src emacs-lisp
  (use-package emacs :elpaca nil :config (electric-pair-mode 1))
  #+end_src

* ESHELL
Because my config needs to work on windows too, I'm going to use Eshell

#+begin_src emacs-lisp
      (use-package eshell
	:elpaca nil
      :config

  (setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
	eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
	eshell-history-size 5000
	eshell-buffer-maximum-lines 5000
	eshell-hist-ignoredups t
	eshell-scroll-to-bottom-on-input t
	eshell-destroy-buffer-when-process-dies t
	eshell-visual-commands '("bash" "htop" "ssh" "top" "zsh")))

    ;; eshell-syntax-highlighting -- adds fish/zsh-like syntax highlighting.
    ;; eshell-rc-script -- your profile for eshell; like a bashrc for eshell.
    ;; eshell-aliases-file -- sets an aliases file for the eshell.
    (use-package eshell-syntax-highlighting
      :after esh-mode
      :config
      (eshell-syntax-highlighting-global-mode +1))
#+end_src

* FONTS
Defining the various fonts that Emacs will use.

#+begin_src emacs-lisp
  (use-package emacs
  :elpaca nil
  :init
  (set-face-attribute 'default nil
    :font "Iosevka"
    :height 110
    :weight 'medium) 

  (set-face-attribute 'variable-pitch nil
    :font "IosevkaAile"
    :height 120
    :weight 'medium) 

  (set-face-attribute 'fixed-pitch nil
    :font "Iosevka"
    :height 110
    :weight 'medium) 

  ;; Italics in comments
  (set-face-attribute 'font-lock-comment-face nil
    :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
    :slant 'italic)

  ;; Default font for graphical frames
  (add-to-list 'default-frame-alist '(font . "Iosevka-11")))

#+end_src

** Zooming In/Out
Use CTRL Plus =/- for zooming in/out. Also use CTRL plus the mouse wheel for the same action.

#+begin_src emacs-lisp
  (use-package emacs
  :elpaca nil
  :general
     ("C-+" 'text-scale-increase)
     ("C--" 'text-scale-decrease)
     ("<C-wheel-up>" 'text-scale-increase)
     ("<C-wheel-down>" 'text-scale-decrease))
#+end_src

* GOLDEN RATIO
#+begin_src emacs-lisp
  (use-package golden-ratio
    :config
    (add-to-list 'golden-ratio-extra-commands 'ace-window)
    (golden-ratio-mode 1))

#+end_src

* GRAPHICAL USER INTERFACE TWEAKS
Let's make GNU Emacs look a little better.

** Disable Menubar, Toolbars and Scrollbars
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Display Line Numbers and Truncated Lines
#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)
#+end_src

* NERD FONTS ICONS
This requires you to either have the `Symols Nerd Font' font installed, or any Nerd Font.

#+begin_src emacs-lisp
    (use-package nerd-icons
      :custom
      (nerd-icons-font-family "SymbolsNerdFontMono"))
#+end_src

* PERSPECTIVE
#+begin_src emacs-lisp
  (use-package perspective
    :after consult
    :custom
    (persp-mode-prefix-key (kbd "C-c M-p"))
    :init
    (persp-mode)
    :config
    (consult-customize consult--source-buffer :hidden t :default nil)
    (add-to-list 'consult-buffer-sources persp-consult-source))
  #+end_src


* MAGIT
The best interface
#+begin_src emacs-lisp
  (use-package transient)
  (use-package magit
    :requires transient)
#+end_src

* TEMPLATES
#+begin_src emacs-lisp
    ;; Configure Tempel
    (use-package tempel
      :general (:keymaps 'tempel-map
                         ;;"TAB" #'tempel-next
                         "C-n" #'tempel-next
                         ;;"S-TAB" #'tempel-previous
                         "C-p" #'tempel-previous))

    ;; Optional: Add tempel-collection.
    ;; The package is young and doesn't have comprehensive coverage.
    (use-package tempel-collection)
#+end_src

* TREEMACS
#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   'simple
            treemacs-file-event-delay                2000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0.2
            treemacs-file-name-transformer           #'identity
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-find-workspace-method           'find-for-file-or-pick-first
            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-header-scroll-indicators        '(nil . "^^^^^^")
            treemacs-hide-dot-git-directory          t
            treemacs-indentation                     2
            treemacs-indentation-string              " "
            treemacs-is-never-other-window           nil
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                        'left
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
            treemacs-project-follow-into-home        nil
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               t
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-text-scale                      nil
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-wide-toggle-width               70
            treemacs-width                           35
            treemacs-width-increment                 1
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
        (treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :general
    (gian/leader-keys
      "t n"    'treemacs-select-window))

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)

  (use-package treemacs-perspective ;;treemacs-perspective if you use perspective.el vs. persp-mode
    :after (treemacs perspective) ;;or perspective vs. persp-mode
    :ensure t
    :config (treemacs-set-scope-type 'Perspectives))
#+end_src



* THEMES
** Selected Theme
I'm using modus-themes, which come builtin with Emacs.
#+begin_src emacs-lisp
  (use-package emacs
   :elpaca nil
   :general
   ( "<f5>" 'modus-themes-toggle)
   :config
   (setq modus-themes-italic-constructs t
         modus-themes-bold-constructs t)
   (load-theme 'modus-vivendi :no-confirm)
    )
#+end_src

* ORG MODE
** Enabling Table of Contents
#+begin_src emacs-lisp
    (use-package toc-org
	:commands toc-org-enable
	:init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Enabling Org Bullets
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-modern
    :after org
    :config (global-org-modern-mode))
#+end_src

** Org Download
#+begin_src emacs-lisp
  (use-package org-download)
#+end_src

** Meow and Org Mode bindings
#+begin_src emacs-lisp
  (use-package org
    :elpaca nil
    :general
    (:keymaps 'org-mode-map :predicate 'meow-mode-major-mode
              ;; <up>
              "C-S-k" 'org-shiftcontrolup
              "S-k" 'org-shiftup
              "M-S-k" 'org-shiftmetaup
              "M-k" 'org-metaup
              "ESC S-k" 'org-shiftmetaup
              "ESC k" 'org-metaup
              ;; <down>
              "C-S-j" 'org-shiftcontroldown
              "S-j" 'org-shiftdown
              "M-S-j" 'org-shiftmetadown
              "M-j" 'org-metadown
              "ESC S-j" 'org-shiftmetadown
              "ESC j" 'org-metadown
              ;; <left>
              "C-S-h" 'org-shiftcontrolleft
              "S-h" 'org-shiftleft
              "M-S-h" 'org-shiftmetaleft
              "M-h" 'org-metaleft
              "ESC S-h" 'org-shiftmetaleft
              "ESC h" 'org-metaleft
              "C-M-S-h" 'org-decrease-number-at-point
              ;; <right>
              "C-S-l" 'org-shiftcontrolright
              "S-l" 'org-shiftright
              "M-S-l" 'org-shiftmetaright
              "M-l" 'org-metaright
              "ESC S-l" 'org-shiftmetaright
              "ESC l" 'org-metaright
              "C-M-S-l" 'org-increase-number-at-point))
#+end_src

* SPACIOUS PADDING
#+begin_src emacs-lisp
  (use-package spacious-padding
    :general ( "<f8>" 'spacious-padding-mode)
    :ghook ('window-setup-hook 'spacious-padding-mode)
    :config
    ;; These is the default value, but I keep it here for visiibility.
    (setq spacious-padding-widths
          '( :internal-border-width 15
             :header-line-width 4
             :mode-line-width 6
             :tab-width 4
             :right-divider-width 30
             :scroll-bar-width 8))
    ;; Read the doc string of `spacious-padding-subtle-mode-line' as it
    ;; is very flexible and provides several examples.
    (setq spacious-padding-subtle-mode-line
          `( :mode-line-active 'default
             :mode-line-inactive vertical-border))
    )
  #+end_src

* PROJECT.EL
TODO: Read documentatio

* PUNI
If Puni exists, also create a new mode for Meow
#+begin_src emacs-lisp
  ; Use puni-mode globally and disable it for term-mode.
  (use-package puni
    :init
    (setq meow-paren-keymap (make-keymap))
    (meow-define-state paren
      "meow state for interacting with Puni"
      :lighter " [P]"
      :keymap meow-paren-keymap)

    (setq meow-cursor-type-paren 'hollow)

    ;; Key to enter paren mode

    (meow-define-keys 'paren
      '("<escape>" . meow-normal-mode)
      ;; Movement
      '("j" . puni-forward-sexp)
      '("k" . puni-backward-sexp)
      '("h" . puni-beginning-of-sexp)
      '("l" . puni-beginning-of-sexp)
      ;; Barp and Slurp
      '("n" . puni-slurp-forward)
      '("b" . puni-barf-forward)
      '("v" . puni-barf-backward)
      '("c" . puni-slurp-backward)
      '("u" . meow-undo)
      )
    
    (puni-global-mode)
  :general ('term-mode-hook #'puni-disable-puni-mode))
#+end_src

* RECENTF-MODE
#+begin_src emacs-lisp
  (use-package emacs :elpaca nil :config (recentf-mode))
#+end_src

* SUDO EDIT
[[https://github.com/nflath/sudo-edit][sudo-edit]] gives us the ability to open files with sudo privileges or switch over to editing with sudo privileges if we initially opened the file without such privileges.

#+begin_src emacs-lisp
(use-package sudo-edit
  :config
    (gian/leader-keys
      "f u" '(sudo-edit-find-file :wk "Sudo find file")
      "f U" '(sudo-edit :wk "Sudo edit file")))
#+end_src

* VUNDO
#+begin_src emacs-lisp
(use-package vundo)
#+end_src

* WHICH-KEY
#+begin_src emacs-lisp
(use-package which-key
  :init
    (which-key-mode 1)
  :config
  (setq which-key-side-window-location 'bottom
	which-key-sort-order #'which-key-key-order-alpha
	which-key-sort-uppercase-first nil
	which-key-add-column-padding 1
	which-key-max-display-columns nil
	which-key-min-display-lines 6
	which-key-side-window-slot -10
	which-key-side-window-max-height 0.25
	which-key-idle-delay 0.8
	which-key-max-description-length 25
	which-key-allow-imprecise-window-fit t
	which-key-separator " → " ))
#+end_src

* WGREP
wgrep allows you to edit a grep buffer and apply those changes to the file buffer like sed interactively. No need to learn sed script, just learn Emacs.

#+begin_src emacs-lisp
  (use-package wgrep)
#+end_src

* PROGRAMMING LANGUAGES
** Common Lisp
Developing common-lisp with Sly
#+begin_src emacs-lisp
  (use-package sly
    :init
    (setq sly-lisp-implementations '((sbcl ("/usr/bin/sbcl")) (roswell ("ros" "-Q" "run"))))
    :ghook ('sly-mode-hook (lambda () (unless (sly-connected-p) (sly) )))
    :custom
    (sly-symbol-completion-mode nil)
    (sly-default-lisp 'roswell)
    (inferior-lisp-program "/usr/bin/sbcl")
    (sly-complete-symbol-function 'sly-flex-completions)
    :config
    (defun sly-lint-region ()
      "Lint current region with lisp-critic"
      (interactive)
      (if (use-region-p)
          (progn 
            (sly-eval-async '(ql:quickload :lisp-critic))
            (let* ((region (buffer-substring-no-properties (mark) (point))))
              (sly-eval-async `(lisp-critic:critique-file ,(make-temp-file "critic-" nil nil region) ))))
        (message "No region selected.")))

    (defun sly-lint-file ()
      "Lint current file with-current-buffer lisp-critic."
      (interactive)
      (sly-eval-async '(ql:quickload :lisp-critic))
      (sly-eval-async `(lisp-critic:critique-file ,(buffer-file-name)))))
 #+end_src
** PHP
#+begin_src emacs-lisp
  (use-package php-mode)
#+end_src
